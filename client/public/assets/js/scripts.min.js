(e => {
    if (e.length)
        if ("IntersectionObserver" in window) {
            const t = new IntersectionObserver((e, t) => {
                Array.from(e, e => {
                    e.isIntersecting && (e.target.classList.add("is-show"), t.unobserve(e.target), setTimeout(() => e.target.classList.remove("fade-in", "is-show"), 1e3))
                })
            });
            setTimeout(() => Array.from(e, e => t.observe(e)), 1e3)
        } else Array.from(e, e => e.classList.add("is-show"))
})
(document.querySelectorAll(".fade-in")), (e => {
    if (!e) return;
    const t = e.querySelector(".form__submit"),
        o = e.elements.email,
        l = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    e.addEventListener("submit", s => {
        if (s.preventDefault(), !1 === l.test(String(o.value).toLowerCase())) return void o.focus();
        e.classList.add("is-loading"), t.disabled = !0;
        const n = {};
        new FormData(e).forEach((e, t) => n[t] = e);
        const d = JSON.stringify(n);
        fetch(e.getAttribute("action"), {
            method: "POST",
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json"
            },
            body: d
        }).then(o => {
            e.classList.remove("is-loading"), t.disabled = !1, e.reset(), modal.dispatchEvent(new CustomEvent("modalShow", {
                detail: {
                    selector: "thank"
                }
            }))
        })
    })
})
(document.querySelector(".subscribe__form")), document.querySelector(".btn-menu-toggle").addEventListener("click", () => {
    document.body.classList.toggle("menu-show");
    var e = document.getElementById("top_info_block");
    console.log("Style: ", window.getComputedStyle(e, null).getPropertyValue("display")), "none" === window.getComputedStyle(e, null).getPropertyValue("display") ? (document.getElementById("top_info_block").style.display = "block", document.getElementById("header_block").style.paddingTop = "0px") : (document.getElementById("top_info_block").style.display = "none", document.getElementById("header_block").style.paddingTop = "20px")
}), Array.from(document.querySelectorAll(".menu__link"), e => e.addEventListener("click", () => {
    document.body.classList.remove("menu-show")
})), (e => {
    if (!e) return;
    const t = e.querySelectorAll(".modal__item"),
        o = document.querySelectorAll("[data-modal]"),
        l = document.querySelector(".wrapper");
    let s = null,
        n = window.pageYOffset;
    e.addEventListener("hide", () => {
        document.body.classList.remove("modal-show"), l.style.top = 0, window.scrollTo(0, n), s = !1, setTimeout(() => document.documentElement.classList.remove("scroll-behavior-off")), document.getElementById("modal-video").innerHTML = ""
    });
    const d = o => {
        document.documentElement.classList.add("scroll-behavior-off"), s || (n = window.pageYOffset), s = e.querySelector(".modal__item--" + o), e.classList.toggle("is-video", "video" === o), Array.from(t, e => e.classList.toggle("visuallyhidden", e !== s)), l.style.top = -n + "px", document.body.classList.add("modal-show"), window.scrollTo(0, 0), s.focus()
    };
    e.addEventListener("click", t => {
        (t.target.classList.contains("modal") || t.target.closest(".modal__close")) && null === t.target.closest("[data-modal]") && e.dispatchEvent(new CustomEvent("hide"))
    }), Array.from(o, e => e.addEventListener("click", () => d(e.getAttribute("data-modal")))), e.addEventListener("modalShow", e => d(e.detail.selector))
})
(document.querySelector(".modal")), (e => {
    if (e) {
        const t = e.querySelectorAll(".token__btn-tab"),
            o = e.querySelectorAll(".token__col");
        Array.from(t, e => e.addEventListener("click", () => {
            Array.from(t, (t, l) => {
                t === e ? (t.classList.add("is-active"), o[l].classList.add("is-active")) : (t.classList.remove("is-active"), o[l].classList.remove("is-active"))
            })
        }))
    }
})
(document.querySelector(".token")), (e => {
    e && e.addEventListener("click", t => {
        t.preventDefault();
        // const o = document.createElement("iframe");
        // o.setAttribute("allowfullscreen", "allowfullscreen"), o.src = "https://www.youtube.com/embed/" + e.getAttribute("data-id") + "?autoplay=1", document.getElementById("modal-video").appendChild(o), modal.dispatchEvent(new CustomEvent("modalShow", {
        //     detail: {
        //         selector: "video"
        //     }
        // }))
        modal.dispatchEvent(new CustomEvent("modalShow", {
            detail: {
                selector: "video"
            }
        }))
    })
})
(document.querySelector(".first-screen .btn--play"));
